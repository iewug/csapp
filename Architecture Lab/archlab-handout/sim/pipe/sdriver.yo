                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6f801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 	
0x034: c0f2fbffffffffffffff | 	iaddq $-5, %rdx
0x03e: 76a700000000000000   | 	jg Loop6x6
0x047: c0f20500000000000000 | 	iaddq $5, %rdx
0x051: 765b00000000000000   | 	jg Loop1
0x05a: 90                   | 	ret
                            | 
0x05b:                      | Loop1:
0x05b: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x065: 200e                 | 	rrmovq %rax, %r14
0x067: c0fe0100000000000000 | 	iaddq $1, %r14
0x071: 6288                 | 	andq %r8, %r8
0x073: 26e0                 | 	cmovg %r14, %rax
0x075: 40860000000000000000 | 	rmmovq %r8, (%rsi)
                            | 		
0x07f: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x089: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x093: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
                            | 
0x09d: 765b00000000000000   | 	jg Loop1
0x0a6: 90                   | 	ret
                            | 
0x0a7:                      | Loop6x6:
0x0a7: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x0b1: 200e                 | 	rrmovq %rax, %r14
0x0b3: c0fe0100000000000000 | 	iaddq $1, %r14
0x0bd: 6288                 | 	andq %r8, %r8
0x0bf: 26e0                 | 	cmovg %r14, %rax
0x0c1: 40860000000000000000 | 	rmmovq %r8, (%rsi)
                            | 	
0x0cb: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x0d5: 200e                 | 	rrmovq %rax, %r14
0x0d7: c0fe0100000000000000 | 	iaddq $1, %r14
0x0e1: 6288                 | 	andq %r8, %r8
0x0e3: 26e0                 | 	cmovg %r14, %rax
0x0e5: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)
                            | 	
0x0ef: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0f9: 200e                 | 	rrmovq %rax, %r14
0x0fb: c0fe0100000000000000 | 	iaddq $1, %r14
0x105: 6288                 | 	andq %r8, %r8
0x107: 26e0                 | 	cmovg %r14, %rax
0x109: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
                            | 	
0x113: 50871800000000000000 | 	mrmovq 24(%rdi), %r8
0x11d: 200e                 | 	rrmovq %rax, %r14
0x11f: c0fe0100000000000000 | 	iaddq $1, %r14
0x129: 6288                 | 	andq %r8, %r8
0x12b: 26e0                 | 	cmovg %r14, %rax
0x12d: 40861800000000000000 | 	rmmovq %r8, 24(%rsi)
                            | 	
0x137: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x141: 200e                 | 	rrmovq %rax, %r14
0x143: c0fe0100000000000000 | 	iaddq $1, %r14
0x14d: 6288                 | 	andq %r8, %r8
0x14f: 26e0                 | 	cmovg %r14, %rax
0x151: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
                            | 	
0x15b: 50872800000000000000 | 	mrmovq 40(%rdi), %r8
0x165: 200e                 | 	rrmovq %rax, %r14
0x167: c0fe0100000000000000 | 	iaddq $1, %r14
0x171: 6288                 | 	andq %r8, %r8
0x173: 26e0                 | 	cmovg %r14, %rax
0x175: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)
                            | 	
                            | 	
0x17f: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x189: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
0x193: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len--
                            | 	
0x19d: 76a700000000000000   | 	jg Loop6x6
0x1a6: c0f20500000000000000 | 	iaddq $5, %rdx
0x1b0: 765b00000000000000   | 	jg Loop1 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1b9:                      | Done:
0x1b9: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1ba:                      | End:
                            | #/* $end ncopy-ys */
0x1ba:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1c0:                      | 	.align 8
0x1c0:                      | src:
0x1c0: ffffffffffffffff     | 	.quad -1
0x1c8: 0200000000000000     | 	.quad 2
0x1d0: fdffffffffffffff     | 	.quad -3
0x1d8: 0400000000000000     | 	.quad 4
0x1e0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1f0:                      | 	.align 16
0x1f0:                      | Predest:
0x1f0: fadebc0000000000     | 	.quad 0xbcdefa
0x1f8:                      | dest:
0x1f8: abefcd0000000000     | 	.quad 0xcdefab
0x200: abefcd0000000000     | 	.quad 0xcdefab
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218:                      | Postdest:
0x218: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x220:                      | .align 8
                            | # Run time stack
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
                            | 
0x2a0:                      | Stack:
